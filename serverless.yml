useDotenv: true

service: trakerapp

frameworkVersion: '3'

custom:
  webpack:
    webpackConfig: 'webpack.config.cjs' # Name of webpack configuration file
    # includeModules: false
    packager: 'yarn' # Packager that will be used to package your external modules
    excludeFiles: services/**/*.test.js # Provide a glob for files to ignore

provider:
  name: aws
  runtime: nodejs16.x
  stage: ${opt:stage, 'dev'}
  profile: trakerapp
  region: us-east-1
  architecture: arm64
  versionFunctions: false
  tags:
    Project: TrakerApp
    Environment: ${self:provider.stage}
  stackTags:
    Project: ${self:provider.tags.Project}
    Environment: ${self:provider.tags.Environment}
  environment:
    STAGE: ${self:provider.stage}
    TRAKER_ENV: ${self:provider.stage}
    REGION: ${self:provider.region}
    DATABASE_URL: ${env:DATABASE_URL}
    TRACKINGS_TABLE: trakerapp-infra-${self:provider.stage}-trackings
    OCCURRENCES_TABLE: trakerapp-infra-${self:provider.stage}-occurrences
    LAMBDA_DYNAMODB_READER_ROLE_NAME: trakerapp-infra-${self:provider.stage}-dynamodb-reader-role
    LAMBDA_DYNAMODB_READER_ROLE_NAME_ARN: "arn:aws:iam::${aws:accountId}:role/${self:provider.environment.LAMBDA_DYNAMODB_READER_ROLE_NAME}"
    LAMBDA_DYNAMODB_WRITTER_ROLE_NAME: trakerapp-infra-${self:provider.stage}-dynamodb-writter-role
    LAMBDA_DYNAMODB_WRITTER_ROLE_NAME_ARN: "arn:aws:iam::${aws:accountId}:role/${self:provider.environment.LAMBDA_DYNAMODB_WRITTER_ROLE_NAME}"
  httpApi:
    cors: true

plugins:
  - serverless-webpack

package:
  individually: true

functions:
  # TRACKINGS API
  - ${file(services/v1/trackings-api/src/create/function.yml)}
  - ${file(services/v1/trackings-api/src/update/function.yml)}
  - ${file(services/v1/trackings-api/src/list/function.yml)}
